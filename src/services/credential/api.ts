// tslint:disable
/**
 * Credential API
 * A RESTful API for managing credential
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Credential
 */
export interface Credential {
    /**
     * 
     * @type {number}
     * @memberof Credential
     */
    credentialId?: number;
    /**
     * 
     * @type {string}
     * @memberof Credential
     */
    credentialGlobalId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Credential
     */
    username?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Credential
     */
    password?: string | null;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: Object | any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    title?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    status?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    detail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    instance?: string | null;
}

/**
 * CredentialsApi - axios parameter creator
 * @export
 */
export const CredentialsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} credentialGlobalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CredentialsCredentialGlobalIdGet: async (credentialGlobalId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'credentialGlobalId' is not null or undefined
            if (credentialGlobalId === null || credentialGlobalId === undefined) {
                throw new RequiredError('credentialGlobalId','Required parameter credentialGlobalId was null or undefined when calling v1CredentialsCredentialGlobalIdGet.');
            }
            const localVarPath = `/v1/Credentials/{credentialGlobalId}`
                .replace(`{${"credentialGlobalId"}}`, encodeURIComponent(String(credentialGlobalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Credential} [credential] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CredentialsPost: async (credential?: Credential, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/Credentials`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof credential !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(credential !== undefined ? credential : {}) : (credential || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CredentialsApi - functional programming interface
 * @export
 */
export const CredentialsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} credentialGlobalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CredentialsCredentialGlobalIdGet(credentialGlobalId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Credential>> {
            const localVarAxiosArgs = await CredentialsApiAxiosParamCreator(configuration).v1CredentialsCredentialGlobalIdGet(credentialGlobalId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Credential} [credential] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CredentialsPost(credential?: Credential, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CredentialsApiAxiosParamCreator(configuration).v1CredentialsPost(credential, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CredentialsApi - factory interface
 * @export
 */
export const CredentialsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} credentialGlobalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CredentialsCredentialGlobalIdGet(credentialGlobalId: string, options?: any): AxiosPromise<Credential> {
            return CredentialsApiFp(configuration).v1CredentialsCredentialGlobalIdGet(credentialGlobalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Credential} [credential] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CredentialsPost(credential?: Credential, options?: any): AxiosPromise<void> {
            return CredentialsApiFp(configuration).v1CredentialsPost(credential, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CredentialsApi - object-oriented interface
 * @export
 * @class CredentialsApi
 * @extends {BaseAPI}
 */
export class CredentialsApi extends BaseAPI {
    /**
     * 
     * @param {string} credentialGlobalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsApi
     */
    public v1CredentialsCredentialGlobalIdGet(credentialGlobalId: string, options?: any) {
        return CredentialsApiFp(this.configuration).v1CredentialsCredentialGlobalIdGet(credentialGlobalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Credential} [credential] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsApi
     */
    public v1CredentialsPost(credential?: Credential, options?: any) {
        return CredentialsApiFp(this.configuration).v1CredentialsPost(credential, options).then((request) => request(this.axios, this.basePath));
    }

}


