// tslint:disable
/**
 * Account API
 * A RESTful API for managing accounts
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    accountId?: number;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    accountGlobalId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    customerGlobalId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    credentialGlobalId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    accountType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    accountStatus?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    accountDataSource?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    serviceProviderCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    enrollmentDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    accountDisplayName?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Account
     */
    isBillPayEnabled?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    accountNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    rawAccountNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    billingAddressFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    billingAddressStreet?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    billingAddressCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    billingAddressState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    billingAddressZip?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    paymentAddressFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    paymentAddressStreet?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    paymentAddressCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    paymentAddressState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    paymentAddressZip?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    siteCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    siteName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    siteAddress1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    siteAddress2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    siteCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    siteState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    sitePostalCode?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    siteLongitude?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    siteLatitude?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    logicalAccountId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    rowVersion?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    externalReferenceId?: string | null;
    /**
     * 
     * @type {Statement}
     * @memberof Account
     */
    latestStatement?: Statement;
    /**
     * 
     * @type {Array<Meter>}
     * @memberof Account
     */
    meters?: Array<Meter> | null;
    /**
     * 
     * @type {Array<Statement>}
     * @memberof Account
     */
    statements?: Array<Statement> | null;
    /**
     * 
     * @type {Array<TimelineEvent>}
     * @memberof Account
     */
    timelineEvents?: Array<TimelineEvent> | null;
}
/**
 * 
 * @export
 * @interface AccountLogin
 */
export interface AccountLogin {
    /**
     * 
     * @type {number}
     * @memberof AccountLogin
     */
    accountLoginId?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountLogin
     */
    accountGlobalId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountLogin
     */
    credentialGlobalId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountLogin
     */
    accountLoginStatus?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountLogin
     */
    loginDate?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountLogin
     */
    notes?: string | null;
}
/**
 * 
 * @export
 * @interface AccountType
 */
export interface AccountType {
    /**
     * 
     * @type {number}
     * @memberof AccountType
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountType
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountType
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountType
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountType
     */
    displayName?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AccountType
     */
    displayOrder?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof AccountType
     */
    isActive?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof AccountType
     */
    createdBy?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountType
     */
    createdDate?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountType
     */
    modifiedBy?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountType
     */
    modifiedDate?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AccountType
     */
    accountTypeId?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountType
     */
    subTypeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountType
     */
    iconCssClass?: string | null;
}
/**
 * 
 * @export
 * @interface Charge
 */
export interface Charge {
    /**
     * 
     * @type {number}
     * @memberof Charge
     */
    chargeId?: number;
    /**
     * 
     * @type {number}
     * @memberof Charge
     */
    meterId?: number;
    /**
     * 
     * @type {string}
     * @memberof Charge
     */
    chargeType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Charge
     */
    chargeActualName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Charge
     */
    lifecycle?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Charge
     */
    thirdPartyProvider?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Charge
     */
    thirdPartyAccountNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Charge
     */
    usageUnit?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Charge
     */
    measurementType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Charge
     */
    rateComponent?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Charge
     */
    intervalStart?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Charge
     */
    intervalEnd?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Charge
     */
    isAdjustmentCharge?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof Charge
     */
    chargeAmount?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Charge
     */
    chargeAmountCurrency?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Charge
     */
    chargeRatePerUnit?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Charge
     */
    chargeRatePerUnitMultiplier?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Charge
     */
    chargeRateCurrency?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Charge
     */
    chargeUnitsUsed?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Charge
     */
    externalReferenceId?: string | null;
}
/**
 * 
 * @export
 * @interface Meter
 */
export interface Meter {
    /**
     * 
     * @type {number}
     * @memberof Meter
     */
    meterId?: number;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    meterGlobalId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Meter
     */
    accountId?: number;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    meterNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    serviceType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    tariff?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    serviceAddress?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    serviceCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    serviceState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    serviceZip?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    bulbType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    podid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    intervalStart?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    intervalEnd?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    externalReferenceId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    logicalMeterId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    accountType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Meter
     */
    rowVersion?: string | null;
    /**
     * 
     * @type {Array<Charge>}
     * @memberof Meter
     */
    charges?: Array<Charge> | null;
    /**
     * 
     * @type {Array<Usage>}
     * @memberof Meter
     */
    usages?: Array<Usage> | null;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: Object | any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    title?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    status?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    detail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    instance?: string | null;
}
/**
 * 
 * @export
 * @interface Statement
 */
export interface Statement {
    /**
     * 
     * @type {number}
     * @memberof Statement
     */
    statementId?: number;
    /**
     * 
     * @type {number}
     * @memberof Statement
     */
    accountId?: number;
    /**
     * 
     * @type {string}
     * @memberof Statement
     */
    invoiceNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Statement
     */
    sourceLink?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Statement
     */
    statementCreatedDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Statement
     */
    statementDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Statement
     */
    statementType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Statement
     */
    dueByDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Statement
     */
    intervalStart?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Statement
     */
    intervalEnd?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Statement
     */
    totalBillAmount?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Statement
     */
    amountDue?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Statement
     */
    newCharges?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Statement
     */
    outstandingBalance?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Statement
     */
    previousBalance?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Statement
     */
    externalReferenceId?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Statement
     */
    isLatest?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Statement
     */
    serviceProviderCode?: string | null;
}
/**
 * 
 * @export
 * @interface TimelineEvent
 */
export interface TimelineEvent {
    /**
     * 
     * @type {number}
     * @memberof TimelineEvent
     */
    timelineEventId?: number;
    /**
     * 
     * @type {number}
     * @memberof TimelineEvent
     */
    accountId?: number;
    /**
     * 
     * @type {string}
     * @memberof TimelineEvent
     */
    timelineEventType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TimelineEvent
     */
    eventDate?: string;
    /**
     * 
     * @type {string}
     * @memberof TimelineEvent
     */
    notes?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof TimelineEvent
     */
    isSuppressed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TimelineEvent
     */
    correlationId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TimelineEvent
     */
    correlationIdType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TimelineEvent
     */
    correlationIdTwo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TimelineEvent
     */
    correlationIdTwoType?: string | null;
}
/**
 * 
 * @export
 * @interface Usage
 */
export interface Usage {
    /**
     * 
     * @type {number}
     * @memberof Usage
     */
    usageId?: number;
    /**
     * 
     * @type {number}
     * @memberof Usage
     */
    meterId?: number;
    /**
     * 
     * @type {string}
     * @memberof Usage
     */
    loadType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usage
     */
    energyUnit?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usage
     */
    usageActualName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usage
     */
    meterReadType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usage
     */
    meterReadTypeAsPrinted?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usage
     */
    previousMeterReadType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usage
     */
    previousMeterReadTypeAsPrinted?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usage
     */
    measurementType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usage
     */
    rateComponent?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usage
     */
    meterReadDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usage
     */
    previousMeterReadDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usage
     */
    intervalStart?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Usage
     */
    intervalEnd?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Usage
     */
    usageAmount?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Usage
     */
    loadFactor?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Usage
     */
    meterReadCurrent?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Usage
     */
    meterReadPrevious?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Usage
     */
    meterReadDelta?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Usage
     */
    meterReadDeltaUsageUnit?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Usage
     */
    powerFactor?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Usage
     */
    usageConstantMultiplier?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Usage
     */
    usageConversionMultiplier?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Usage
     */
    calorificValue?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Usage
     */
    externalReferenceId?: string | null;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} accountGlobalId 
         * @param {AccountLogin} [accountLogin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsAccountGlobalIdAccountGlobalIdAccountLoginsPost: async (accountGlobalId: string, accountLogin?: AccountLogin, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountGlobalId' is not null or undefined
            if (accountGlobalId === null || accountGlobalId === undefined) {
                throw new RequiredError('accountGlobalId','Required parameter accountGlobalId was null or undefined when calling v1AccountsAccountGlobalIdAccountGlobalIdAccountLoginsPost.');
            }
            const localVarPath = `/v1/Accounts/AccountGlobalId/{accountGlobalId}/AccountLogins`
                .replace(`{${"accountGlobalId"}}`, encodeURIComponent(String(accountGlobalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof accountLogin !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(accountLogin !== undefined ? accountLogin : {}) : (accountLogin || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountGlobalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsAccountGlobalIdAccountGlobalIdGet: async (accountGlobalId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountGlobalId' is not null or undefined
            if (accountGlobalId === null || accountGlobalId === undefined) {
                throw new RequiredError('accountGlobalId','Required parameter accountGlobalId was null or undefined when calling v1AccountsAccountGlobalIdAccountGlobalIdGet.');
            }
            const localVarPath = `/v1/Accounts/AccountGlobalId/{accountGlobalId}`
                .replace(`{${"accountGlobalId"}}`, encodeURIComponent(String(accountGlobalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountGlobalId 
         * @param {Array<Meter>} [meter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsAccountGlobalIdAccountGlobalIdMetersPost: async (accountGlobalId: string, meter?: Array<Meter>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountGlobalId' is not null or undefined
            if (accountGlobalId === null || accountGlobalId === undefined) {
                throw new RequiredError('accountGlobalId','Required parameter accountGlobalId was null or undefined when calling v1AccountsAccountGlobalIdAccountGlobalIdMetersPost.');
            }
            const localVarPath = `/v1/Accounts/AccountGlobalId/{accountGlobalId}/Meters`
                .replace(`{${"accountGlobalId"}}`, encodeURIComponent(String(accountGlobalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof meter !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(meter !== undefined ? meter : {}) : (meter || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountGlobalId 
         * @param {Array<Statement>} [statement] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsAccountGlobalIdAccountGlobalIdStatementsPost: async (accountGlobalId: string, statement?: Array<Statement>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountGlobalId' is not null or undefined
            if (accountGlobalId === null || accountGlobalId === undefined) {
                throw new RequiredError('accountGlobalId','Required parameter accountGlobalId was null or undefined when calling v1AccountsAccountGlobalIdAccountGlobalIdStatementsPost.');
            }
            const localVarPath = `/v1/Accounts/AccountGlobalId/{accountGlobalId}/Statements`
                .replace(`{${"accountGlobalId"}}`, encodeURIComponent(String(accountGlobalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof statement !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(statement !== undefined ? statement : {}) : (statement || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<Account>} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsCreateAccountsPost: async (account?: Array<Account>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/Accounts/CreateAccounts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof account !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(account !== undefined ? account : {}) : (account || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerGlobalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsCustomerGlobalIdCustomerGlobalIdGet: async (customerGlobalId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerGlobalId' is not null or undefined
            if (customerGlobalId === null || customerGlobalId === undefined) {
                throw new RequiredError('customerGlobalId','Required parameter customerGlobalId was null or undefined when calling v1AccountsCustomerGlobalIdCustomerGlobalIdGet.');
            }
            const localVarPath = `/v1/Accounts/CustomerGlobalId/{customerGlobalId}`
                .replace(`{${"customerGlobalId"}}`, encodeURIComponent(String(customerGlobalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Account} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsPost: async (account?: Account, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/Accounts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof account !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(account !== undefined ? account : {}) : (account || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [accountId] 
         * @param {Account} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsPut: async (accountId?: number, account?: Account, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/Accounts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof account !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(account !== undefined ? account : {}) : (account || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsTypesGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/Accounts/Types`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} accountGlobalId 
         * @param {AccountLogin} [accountLogin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AccountsAccountGlobalIdAccountGlobalIdAccountLoginsPost(accountGlobalId: string, accountLogin?: AccountLogin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountLogin>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).v1AccountsAccountGlobalIdAccountGlobalIdAccountLoginsPost(accountGlobalId, accountLogin, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} accountGlobalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AccountsAccountGlobalIdAccountGlobalIdGet(accountGlobalId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).v1AccountsAccountGlobalIdAccountGlobalIdGet(accountGlobalId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} accountGlobalId 
         * @param {Array<Meter>} [meter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AccountsAccountGlobalIdAccountGlobalIdMetersPost(accountGlobalId: string, meter?: Array<Meter>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).v1AccountsAccountGlobalIdAccountGlobalIdMetersPost(accountGlobalId, meter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} accountGlobalId 
         * @param {Array<Statement>} [statement] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AccountsAccountGlobalIdAccountGlobalIdStatementsPost(accountGlobalId: string, statement?: Array<Statement>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).v1AccountsAccountGlobalIdAccountGlobalIdStatementsPost(accountGlobalId, statement, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Array<Account>} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AccountsCreateAccountsPost(account?: Array<Account>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).v1AccountsCreateAccountsPost(account, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} customerGlobalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AccountsCustomerGlobalIdCustomerGlobalIdGet(customerGlobalId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).v1AccountsCustomerGlobalIdCustomerGlobalIdGet(customerGlobalId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Account} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AccountsPost(account?: Account, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).v1AccountsPost(account, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [accountId] 
         * @param {Account} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AccountsPut(accountId?: number, account?: Account, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).v1AccountsPut(accountId, account, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AccountsTypesGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountType>>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).v1AccountsTypesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} accountGlobalId 
         * @param {AccountLogin} [accountLogin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsAccountGlobalIdAccountGlobalIdAccountLoginsPost(accountGlobalId: string, accountLogin?: AccountLogin, options?: any): AxiosPromise<AccountLogin> {
            return AccountsApiFp(configuration).v1AccountsAccountGlobalIdAccountGlobalIdAccountLoginsPost(accountGlobalId, accountLogin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountGlobalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsAccountGlobalIdAccountGlobalIdGet(accountGlobalId: string, options?: any): AxiosPromise<Account> {
            return AccountsApiFp(configuration).v1AccountsAccountGlobalIdAccountGlobalIdGet(accountGlobalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountGlobalId 
         * @param {Array<Meter>} [meter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsAccountGlobalIdAccountGlobalIdMetersPost(accountGlobalId: string, meter?: Array<Meter>, options?: any): AxiosPromise<void> {
            return AccountsApiFp(configuration).v1AccountsAccountGlobalIdAccountGlobalIdMetersPost(accountGlobalId, meter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountGlobalId 
         * @param {Array<Statement>} [statement] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsAccountGlobalIdAccountGlobalIdStatementsPost(accountGlobalId: string, statement?: Array<Statement>, options?: any): AxiosPromise<void> {
            return AccountsApiFp(configuration).v1AccountsAccountGlobalIdAccountGlobalIdStatementsPost(accountGlobalId, statement, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<Account>} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsCreateAccountsPost(account?: Array<Account>, options?: any): AxiosPromise<Array<Account>> {
            return AccountsApiFp(configuration).v1AccountsCreateAccountsPost(account, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerGlobalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsCustomerGlobalIdCustomerGlobalIdGet(customerGlobalId: string, options?: any): AxiosPromise<Array<Account>> {
            return AccountsApiFp(configuration).v1AccountsCustomerGlobalIdCustomerGlobalIdGet(customerGlobalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Account} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsPost(account?: Account, options?: any): AxiosPromise<Account> {
            return AccountsApiFp(configuration).v1AccountsPost(account, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [accountId] 
         * @param {Account} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsPut(accountId?: number, account?: Account, options?: any): AxiosPromise<void> {
            return AccountsApiFp(configuration).v1AccountsPut(accountId, account, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AccountsTypesGet(options?: any): AxiosPromise<Array<AccountType>> {
            return AccountsApiFp(configuration).v1AccountsTypesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * 
     * @param {string} accountGlobalId 
     * @param {AccountLogin} [accountLogin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public v1AccountsAccountGlobalIdAccountGlobalIdAccountLoginsPost(accountGlobalId: string, accountLogin?: AccountLogin, options?: any) {
        return AccountsApiFp(this.configuration).v1AccountsAccountGlobalIdAccountGlobalIdAccountLoginsPost(accountGlobalId, accountLogin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountGlobalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public v1AccountsAccountGlobalIdAccountGlobalIdGet(accountGlobalId: string, options?: any) {
        return AccountsApiFp(this.configuration).v1AccountsAccountGlobalIdAccountGlobalIdGet(accountGlobalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountGlobalId 
     * @param {Array<Meter>} [meter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public v1AccountsAccountGlobalIdAccountGlobalIdMetersPost(accountGlobalId: string, meter?: Array<Meter>, options?: any) {
        return AccountsApiFp(this.configuration).v1AccountsAccountGlobalIdAccountGlobalIdMetersPost(accountGlobalId, meter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountGlobalId 
     * @param {Array<Statement>} [statement] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public v1AccountsAccountGlobalIdAccountGlobalIdStatementsPost(accountGlobalId: string, statement?: Array<Statement>, options?: any) {
        return AccountsApiFp(this.configuration).v1AccountsAccountGlobalIdAccountGlobalIdStatementsPost(accountGlobalId, statement, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<Account>} [account] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public v1AccountsCreateAccountsPost(account?: Array<Account>, options?: any) {
        return AccountsApiFp(this.configuration).v1AccountsCreateAccountsPost(account, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerGlobalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public v1AccountsCustomerGlobalIdCustomerGlobalIdGet(customerGlobalId: string, options?: any) {
        return AccountsApiFp(this.configuration).v1AccountsCustomerGlobalIdCustomerGlobalIdGet(customerGlobalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Account} [account] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public v1AccountsPost(account?: Account, options?: any) {
        return AccountsApiFp(this.configuration).v1AccountsPost(account, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [accountId] 
     * @param {Account} [account] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public v1AccountsPut(accountId?: number, account?: Account, options?: any) {
        return AccountsApiFp(this.configuration).v1AccountsPut(accountId, account, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public v1AccountsTypesGet(options?: any) {
        return AccountsApiFp(this.configuration).v1AccountsTypesGet(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * MetersApi - axios parameter creator
 * @export
 */
export const MetersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} meterGlobalId 
         * @param {Array<Charge>} [charge] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MetersMeterGlobalIdMeterGlobalIdChargesPost: async (meterGlobalId: string, charge?: Array<Charge>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'meterGlobalId' is not null or undefined
            if (meterGlobalId === null || meterGlobalId === undefined) {
                throw new RequiredError('meterGlobalId','Required parameter meterGlobalId was null or undefined when calling v1MetersMeterGlobalIdMeterGlobalIdChargesPost.');
            }
            const localVarPath = `/v1/Meters/MeterGlobalId/{meterGlobalId}/Charges`
                .replace(`{${"meterGlobalId"}}`, encodeURIComponent(String(meterGlobalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof charge !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(charge !== undefined ? charge : {}) : (charge || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} meterGlobalId 
         * @param {Array<Usage>} [usage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MetersMeterGlobalIdMeterGlobalIdUsagesPost: async (meterGlobalId: string, usage?: Array<Usage>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'meterGlobalId' is not null or undefined
            if (meterGlobalId === null || meterGlobalId === undefined) {
                throw new RequiredError('meterGlobalId','Required parameter meterGlobalId was null or undefined when calling v1MetersMeterGlobalIdMeterGlobalIdUsagesPost.');
            }
            const localVarPath = `/v1/Meters/MeterGlobalId/{meterGlobalId}/Usages`
                .replace(`{${"meterGlobalId"}}`, encodeURIComponent(String(meterGlobalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof usage !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(usage !== undefined ? usage : {}) : (usage || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetersApi - functional programming interface
 * @export
 */
export const MetersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} meterGlobalId 
         * @param {Array<Charge>} [charge] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MetersMeterGlobalIdMeterGlobalIdChargesPost(meterGlobalId: string, charge?: Array<Charge>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MetersApiAxiosParamCreator(configuration).v1MetersMeterGlobalIdMeterGlobalIdChargesPost(meterGlobalId, charge, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} meterGlobalId 
         * @param {Array<Usage>} [usage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MetersMeterGlobalIdMeterGlobalIdUsagesPost(meterGlobalId: string, usage?: Array<Usage>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await MetersApiAxiosParamCreator(configuration).v1MetersMeterGlobalIdMeterGlobalIdUsagesPost(meterGlobalId, usage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MetersApi - factory interface
 * @export
 */
export const MetersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} meterGlobalId 
         * @param {Array<Charge>} [charge] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MetersMeterGlobalIdMeterGlobalIdChargesPost(meterGlobalId: string, charge?: Array<Charge>, options?: any): AxiosPromise<void> {
            return MetersApiFp(configuration).v1MetersMeterGlobalIdMeterGlobalIdChargesPost(meterGlobalId, charge, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} meterGlobalId 
         * @param {Array<Usage>} [usage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MetersMeterGlobalIdMeterGlobalIdUsagesPost(meterGlobalId: string, usage?: Array<Usage>, options?: any): AxiosPromise<void> {
            return MetersApiFp(configuration).v1MetersMeterGlobalIdMeterGlobalIdUsagesPost(meterGlobalId, usage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetersApi - object-oriented interface
 * @export
 * @class MetersApi
 * @extends {BaseAPI}
 */
export class MetersApi extends BaseAPI {
    /**
     * 
     * @param {string} meterGlobalId 
     * @param {Array<Charge>} [charge] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetersApi
     */
    public v1MetersMeterGlobalIdMeterGlobalIdChargesPost(meterGlobalId: string, charge?: Array<Charge>, options?: any) {
        return MetersApiFp(this.configuration).v1MetersMeterGlobalIdMeterGlobalIdChargesPost(meterGlobalId, charge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} meterGlobalId 
     * @param {Array<Usage>} [usage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetersApi
     */
    public v1MetersMeterGlobalIdMeterGlobalIdUsagesPost(meterGlobalId: string, usage?: Array<Usage>, options?: any) {
        return MetersApiFp(this.configuration).v1MetersMeterGlobalIdMeterGlobalIdUsagesPost(meterGlobalId, usage, options).then((request) => request(this.axios, this.basePath));
    }

}


