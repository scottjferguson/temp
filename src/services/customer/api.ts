// tslint:disable
/**
 * Customer API
 * A RESTful API for managing customers
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    addressId?: number;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    addressType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    line1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    line2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    line3?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    city?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    stateProv?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    postalCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    postalCodeLastFour?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    county?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    countryCode?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Address
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Address
     */
    isValid?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof Address
     */
    isPhysical?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Address
     */
    isPrimaryBilling?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Address
     */
    isPrimaryShipping?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    rowVersion?: string | null;
}
/**
 * 
 * @export
 * @interface Attribute
 */
export interface Attribute {
    /**
     * 
     * @type {number}
     * @memberof Attribute
     */
    attributeId?: number;
    /**
     * 
     * @type {string}
     * @memberof Attribute
     */
    attributeType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Attribute
     */
    attributeValue?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Attribute
     */
    rowVersion?: string | null;
}
/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * 
     * @type {number}
     * @memberof Customer
     */
    customerId?: number;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    customerGlobalId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    customerStatus?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    customerType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    brandCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    lastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    customerNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    joinDate?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Customer
     */
    isActive?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    businessName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    externalReferenceId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    rowVersion?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    username?: string | null;
    /**
     * 
     * @type {Array<Address>}
     * @memberof Customer
     */
    addresses?: Array<Address> | null;
    /**
     * 
     * @type {Array<Attribute>}
     * @memberof Customer
     */
    attributes?: Array<Attribute> | null;
    /**
     * 
     * @type {Array<EmailAddress>}
     * @memberof Customer
     */
    emailAddresses?: Array<EmailAddress> | null;
    /**
     * 
     * @type {Array<PhoneNumber>}
     * @memberof Customer
     */
    phoneNumbers?: Array<PhoneNumber> | null;
}
/**
 * 
 * @export
 * @interface CustomerIdentification
 */
export interface CustomerIdentification {
    /**
     * 
     * @type {number}
     * @memberof CustomerIdentification
     */
    customerId?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerIdentification
     */
    customerGlobalId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerIdentification
     */
    username?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerIdentification
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerIdentification
     */
    lastName?: string | null;
}
/**
 * 
 * @export
 * @interface EmailAddress
 */
export interface EmailAddress {
    /**
     * 
     * @type {number}
     * @memberof EmailAddress
     */
    emailAddressId?: number;
    /**
     * 
     * @type {string}
     * @memberof EmailAddress
     */
    emailAddressType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmailAddress
     */
    emailAddressValue?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof EmailAddress
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EmailAddress
     */
    isValid?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof EmailAddress
     */
    isPrimary?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmailAddress
     */
    rowVersion?: string | null;
}
/**
 * 
 * @export
 * @interface PhoneNumber
 */
export interface PhoneNumber {
    /**
     * 
     * @type {number}
     * @memberof PhoneNumber
     */
    phoneNumberId?: number;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumber
     */
    phoneNumberType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumber
     */
    phoneNumberValue?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumber
     */
    phoneNumberNumeric?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumber
     */
    countryCode?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PhoneNumber
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PhoneNumber
     */
    isValid?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof PhoneNumber
     */
    isOnDncList?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PhoneNumber
     */
    isPrimary?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumber
     */
    rowVersion?: string | null;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: AnyType | any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    title?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    status?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    detail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    instance?: string | null;
}

/**
 * CustomersApi - axios parameter creator
 * @export
 */
export const CustomersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CustomersCustomerIdGet: async (customerId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            if (customerId === null || customerId === undefined) {
                throw new RequiredError('customerId','Required parameter customerId was null or undefined when calling v1CustomersCustomerIdGet.');
            }
            const localVarPath = `/v1/Customers/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} skip 
         * @param {number} take 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CustomersIdentificationsPaginateSkipTakeGet: async (skip: number, take: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'skip' is not null or undefined
            if (skip === null || skip === undefined) {
                throw new RequiredError('skip','Required parameter skip was null or undefined when calling v1CustomersIdentificationsPaginateSkipTakeGet.');
            }
            // verify required parameter 'take' is not null or undefined
            if (take === null || take === undefined) {
                throw new RequiredError('take','Required parameter take was null or undefined when calling v1CustomersIdentificationsPaginateSkipTakeGet.');
            }
            const localVarPath = `/v1/Customers/Identifications/Paginate/{skip}/{take}`
                .replace(`{${"skip"}}`, encodeURIComponent(String(skip)))
                .replace(`{${"take"}}`, encodeURIComponent(String(take)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CustomersIdentificationsUsernameGet: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling v1CustomersIdentificationsUsernameGet.');
            }
            const localVarPath = `/v1/Customers/Identifications/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Customer} [customer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CustomersPost: async (customer?: Customer, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/Customers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof customer !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(customer !== undefined ? customer : {}) : (customer || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersApi - functional programming interface
 * @export
 */
export const CustomersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CustomersCustomerIdGet(customerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await CustomersApiAxiosParamCreator(configuration).v1CustomersCustomerIdGet(customerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} skip 
         * @param {number} take 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CustomersIdentificationsPaginateSkipTakeGet(skip: number, take: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerIdentification>>> {
            const localVarAxiosArgs = await CustomersApiAxiosParamCreator(configuration).v1CustomersIdentificationsPaginateSkipTakeGet(skip, take, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CustomersIdentificationsUsernameGet(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerIdentification>> {
            const localVarAxiosArgs = await CustomersApiAxiosParamCreator(configuration).v1CustomersIdentificationsUsernameGet(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Customer} [customer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CustomersPost(customer?: Customer, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerIdentification>> {
            const localVarAxiosArgs = await CustomersApiAxiosParamCreator(configuration).v1CustomersPost(customer, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CustomersApi - factory interface
 * @export
 */
export const CustomersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} customerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CustomersCustomerIdGet(customerId: number, options?: any): AxiosPromise<Customer> {
            return CustomersApiFp(configuration).v1CustomersCustomerIdGet(customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} skip 
         * @param {number} take 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CustomersIdentificationsPaginateSkipTakeGet(skip: number, take: number, options?: any): AxiosPromise<Array<CustomerIdentification>> {
            return CustomersApiFp(configuration).v1CustomersIdentificationsPaginateSkipTakeGet(skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CustomersIdentificationsUsernameGet(username: string, options?: any): AxiosPromise<CustomerIdentification> {
            return CustomersApiFp(configuration).v1CustomersIdentificationsUsernameGet(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Customer} [customer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CustomersPost(customer?: Customer, options?: any): AxiosPromise<CustomerIdentification> {
            return CustomersApiFp(configuration).v1CustomersPost(customer, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
export class CustomersApi extends BaseAPI {
    /**
     * 
     * @param {number} customerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public v1CustomersCustomerIdGet(customerId: number, options?: any) {
        return CustomersApiFp(this.configuration).v1CustomersCustomerIdGet(customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} skip 
     * @param {number} take 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public v1CustomersIdentificationsPaginateSkipTakeGet(skip: number, take: number, options?: any) {
        return CustomersApiFp(this.configuration).v1CustomersIdentificationsPaginateSkipTakeGet(skip, take, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public v1CustomersIdentificationsUsernameGet(username: string, options?: any) {
        return CustomersApiFp(this.configuration).v1CustomersIdentificationsUsernameGet(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Customer} [customer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    public v1CustomersPost(customer?: Customer, options?: any) {
        return CustomersApiFp(this.configuration).v1CustomersPost(customer, options).then((request) => request(this.axios, this.basePath));
    }

}


